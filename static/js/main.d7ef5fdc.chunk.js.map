{"version":3,"sources":["assets/5672_marsmap4k.jpg","assets/5672_mars_12k_color.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","className","height","globeTexture","mars","globeCloudsTexture","markers","id","city","color","coordinates","value","options","ambientLightColor","cameraRotateSpeed","focusAnimationDuration","focusEasingFunction","pointLightColor","pointLightIntensity","globeGlowColor","markerTooltipRenderer","marker","width","onClickMarker","markerObject","event","console","log","onMouseOutMarker","onGlobeTextureLoaded","onMouseOverMarker","enableMarkerGlow","markerRadiusScaleRange","markerType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,4C,4FCA3CD,EAAOC,QAAU,IAA0B,iD,4HC6F5BC,MArFf,WA6DE,OACE,yBAAKC,UAAU,OACb,kBAAC,IAAD,aACAC,OAAO,QACLC,aAAcC,IACdC,mBAAoB,KACpBC,QAhEU,CACd,CACEC,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,OAAQ,UACtBC,MAAO,IAET,CACEJ,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,UAAW,WACzBC,MAAO,IAET,CACEJ,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,WAAY,YAC1BC,MAAO,IAET,CACEJ,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,QAAS,UACvBC,MAAO,KAET,CACEJ,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,QAAS,OACvBC,MAAO,IAET,CACEJ,GAAI,UACJC,KAAM,mEACNC,MAAO,OACPC,YAAa,CAAC,SAAU,SACxBC,MAAO,KAwBLC,QAnBU,CACdC,kBAAmB,SACnBC,kBAAmB,GACnBC,uBAAwB,IACxBC,oBAAqB,CAAC,SAAU,QAChCC,gBAAiB,OACjBC,oBAAqB,IACrBC,eAAgB,SAChBC,sBAAuB,SAAAC,GAAM,gBAAOA,EAAOb,KAAd,aAAuBa,EAAOV,MAA9B,OAYzBW,MAAM,OACNC,cAAe,SAACF,EAAQG,EAAcC,GAAvB,OAAiCC,QAAQC,IAAIN,EAAQG,EAAcC,IAClFG,iBAAkB,SAACP,EAAQG,EAAcC,GAAvB,OAAiCC,QAAQC,IAAIN,EAAQG,EAAcC,IACrFI,qBAAsB,kBAAMH,QAAQC,IAAI,iBACxCG,kBAAmB,SAACT,EAAQG,EAAcC,GAAvB,OAAiCC,QAAQC,IAAIN,EAAQG,EAAcC,KAVxF,UAWW,CACPM,kBAAkB,EAClBC,uBAAwB,CAAC,GAAK,IAC9BC,WAAY,WCzEFC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.d7ef5fdc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/5672_marsmap4k.59785aac.jpg\";","module.exports = __webpack_public_path__ + \"static/media/5672_mars_12k_color.bd8c4c33.jpg\";","import React from 'react';\nimport ReactGlobe from 'react-globe';\n\nimport './App.css';\n\nimport mars from './assets/5672_marsmap4k.jpg';\nimport mars12 from './assets/5672_mars_12k_color.jpg';\n\nfunction App() {\n\n  // support rendering markers with simple data\n  const markers = [\n    {\n      id: 'marker1',\n      city: '2413fb3709b05939f04cf2e92f7d0897fc2596f9ad0b8a9ea855c7bfebaae892',\n      color: 'gold',\n      coordinates: [1.3521, 103.8198],\n      value: 50,\n    },\n    {\n      id: 'marker2',\n      city: 'f692ba25de4478817a565f0c60b6f9c974d1c4ff11397c89119d9946d72ffb1c',\n      color: 'gold',\n      coordinates: [40.73061, -73.935242],\n      value: 25,\n    },\n    {\n      id: 'marker3',\n      city: 'e5af4874d53cd94043d5292e3531c9597b3ef8940905c68ad9859c34a8d385dd',\n      color: 'gold',\n      coordinates: [37.773972, -122.431297],\n      value: 35,\n    },\n    {\n      id: 'marker4',\n      city: '245633f1d8b9adccf4a4eb7459e77ca240a6e4e7da3939328ce192239159ea85',\n      color: 'gold',\n      coordinates: [39.9042, 116.4074],\n      value: 135,\n    },\n    {\n      id: 'marker5',\n      city: '3636a19e2004d0fdfa7e06f5a3f5e64df958b547fd83c2517c4c4c6a1b408495',\n      color: 'gold',\n      coordinates: [51.5074, 0.1278],\n      value: 80,\n    },\n    {\n      id: 'marker6',\n      city: 'a2eaa3f5035082052db6d682d6d71f67f2a76dc3c1d5586afed59ed4a0c9cd9a',\n      color: 'gold',\n      coordinates: [29.7604, -95.3698],\n      value: 54,\n    },\n  ];\n\n  // simple and extensive options to configure globe\n  const options = {\n    ambientLightColor: 'orange',\n    cameraRotateSpeed: 0.5,\n    focusAnimationDuration: 2000,\n    focusEasingFunction: ['Linear', 'None'],\n    pointLightColor: 'gold',\n    pointLightIntensity: 1.5,\n    globeGlowColor: 'orange',\n    markerTooltipRenderer: marker => `${marker.city} (${marker.value})`,\n  };\n\n\n  return (\n    <div className=\"App\">\n      <ReactGlobe \n      height=\"100vh\"\n        globeTexture={mars}\n        globeCloudsTexture={null}\n        markers={markers}\n        options={options}\n        width=\"100%\"\n        onClickMarker={(marker, markerObject, event) => console.log(marker, markerObject, event)}\n        onMouseOutMarker={(marker, markerObject, event) => console.log(marker, markerObject, event)}\n        onGlobeTextureLoaded={() => console.log('globe loaded')}\n        onMouseOverMarker={(marker, markerObject, event) => console.log(marker, markerObject, event)}\n        options={{\n          enableMarkerGlow: false,\n          markerRadiusScaleRange: [0.2, 0.5],\n          markerType: 'bar',\n        }}\n      />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}